//
//  LCNetworkConfig.m
//  fish
//
//  网络请求相关配置
//
//  Created by J on 15/12/1.
//  Copyright © 2015年 GZLC. All rights reserved.
//

#import "LCNetworkConfig.h"
#import "YTKNetworkConfig.h"
#import "NSObject+JSONTool.h"
#import "LCAccount.h"
#import "TimeClock.h"

@interface LCNetworkConfig ()
{
    NSArray *kTimeStampArr;
}
//@property (nonatomic, strong) NSMutableArray *cacheArray;  // 缓存请求内容

@end

@implementation LCNetworkConfig

+ (LCNetworkConfig *)sharedInstance
{
    static id config = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        config = [[LCNetworkConfig alloc]init];
    });
    return config;
}

+ (void)setupNetworkConfig {
    [self setupNetworkConfigWithUrlString:BASE_URL];
}

//+ (void)setupUpLoadUrlWithFileType:(UploadFileType)fileType ownerId:(NSInteger)o_id fileIndex:(NSInteger)index
//{
//    LCAccount *act = [LCAccount sharedInstance];
//    NSString *appendingString = [NSString stringWithFormat:@"?service=upload&session_id=%@&type=%ld&indice=%ld&owner_id=%ld",act.sessionId,fileType,index,o_id];
//    [self setupNetworkConfigWithUrlString:[BASE_URL stringByAppendingString:appendingString]];
//}

+ (void)setupNetworkConfigWithUrlString:(NSString *)urlString
{
    YTKNetworkConfig *config = [YTKNetworkConfig sharedInstance];
    config.baseUrl = urlString;
}

- (NSArray<NSNumber *> *)timeStampArray
{
    return kTimeStampArr;
}
//#pragma mark- getter
//- (NSMutableArray *)cacheArray
//{
//    if (!_cacheArray)
//    {
//        _cacheArray = [[NSMutableArray alloc]initWithCapacity:0];
//    }
//    return _cacheArray;
//}

- (NSDictionary *)setupRequestConfigWithIdentifiersArray:(NSArray *)identifiers ParamDicArray:(NSArray *)paramsArr PostType:(PostType)type
{
    NSTimeInterval timeInterval = [[TimeClock sharedInstance]getTimeInterval];
    NSMutableArray *outArray = [[NSMutableArray alloc]initWithCapacity:0];
    LCAccount *account = [LCAccount sharedInstance];
    [outArray addObject:account.sessionId?account.sessionId:@""];
    
    NSMutableArray *middleArray = [[NSMutableArray alloc]initWithCapacity:0];
//    NSMutableArray *insideArray = self.cacheArray;
    NSMutableArray *insideArray = [[NSMutableArray alloc]initWithCapacity:0];
    NSMutableDictionary *insideDic = [[NSMutableDictionary alloc]initWithCapacity:0];
    [identifiers enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        
        if (idx == 0)
        {
            [insideArray addObject:@(type)];
            [insideArray addObject:@(timeInterval*1000000)];
        }
        NSMutableArray *inside_arr = [[NSMutableArray alloc]initWithCapacity:0]; // 带着随机数那一层
        NSString *key = [NSString stringWithFormat:@"#%ld#%@",idx,identifiers[idx]];
        if ([insideDic valueForKey:key])
        {
            NSMutableArray *kObjc = [[insideDic valueForKey:key] mutableCopy];
            [kObjc addObject:@[@0,paramsArr[idx]]];
            [insideDic setValue:kObjc forKey:key];
        }
        else
        {
            [inside_arr addObject:@[@0,paramsArr[idx]]];
            [insideDic setValue:inside_arr forKey:key];
        }
    }];
    
    [insideArray addObject:insideDic];
    [middleArray addObject:insideArray];
    [outArray addObject:middleArray];
    
    kTimeStampArr = @[insideArray[1]];   // 用数组保存是为了方便以后扩展
    NSString *jsonStr = [self resetJsonString:[NSObject jsonStringWithNSArray:outArray]];
    NSLog(@"发送的请求体:%@",jsonStr);
    return @{@"text":jsonStr};
}

//- (void)clearLastCacheItem
//{
//    [self.cacheArray removeLastObject];
//}
//
//- (void)clearCache
//{
//    [self.cacheArray removeAllObjects];
//}

- (NSString *)resetJsonString:(NSString *)string
{
    NSRegularExpression *regularExpression = [NSRegularExpression regularExpressionWithPattern:@"#\\d*#" options:0 error:nil];
    return [regularExpression stringByReplacingMatchesInString:string options:0 range:NSMakeRange(0, string.length) withTemplate:@""];
}
@end
